// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.CommonDataModel.ObjectModel.Persistence.Syms.Models
{
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Type information
    /// </summary>
    public partial class TypeInfo
    {
        /// <summary>
        /// Initializes a new instance of the TypeInfo class.
        /// </summary>
        public TypeInfo() { }

        /// <summary>
        /// Initializes a new instance of the TypeInfo class.
        /// </summary>
        /// <param name="typeName">Type name.</param>
        /// <param name="typeFamily">Type family.</param>
        /// <param name="isTableType">Is Table type.</param>
        /// <param name="isComplexType">Is Complex type.</param>
        /// <param name="isNullable">Is Nullable.</param>
        /// <param name="length">Length.</param>
        /// <param name="precision">Precision.</param>
        /// <param name="scale">Scale.</param>
        /// <param name="properties">Property bag.</param>
        public TypeInfo(string typeName, string typeFamily = default(string), bool? isTableType = default(bool?), bool? isComplexType = default(bool?), bool? isNullable = default(bool?), int? length = default(int?), int? precision = default(int?), int? scale = default(int?), System.Collections.Generic.IDictionary<string, JToken> properties = default(System.Collections.Generic.IDictionary<string, JToken>))
        {
            TypeFamily = typeFamily;
            TypeName = typeName;
            IsTableType = isTableType;
            IsComplexType = isComplexType;
            IsNullable = isNullable;
            Length = length;
            Precision = precision;
            Scale = scale;
            Properties = properties;
        }

        /// <summary>
        /// Gets or sets type family.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "TypeFamily")]
        public string TypeFamily { get; set; }

        /// <summary>
        /// Gets or sets type name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "TypeName")]
        public string TypeName { get; set; }

        /// <summary>
        /// Gets or sets is Table type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "IsTableType")]
        public bool? IsTableType { get; set; }

        /// <summary>
        /// Gets or sets is Complex type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "IsComplexType")]
        public bool? IsComplexType { get; set; }

        /// <summary>
        /// Gets or sets is Nullable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "IsNullable")]
        public bool? IsNullable { get; set; }

        /// <summary>
        /// Gets or sets length.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Length")]
        public int? Length { get; set; }

        /// <summary>
        /// Gets or sets precision.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Precision")]
        public int? Precision { get; set; }

        /// <summary>
        /// Gets or sets scale.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Scale")]
        public int? Scale { get; set; }

        /// <summary>
        /// Gets or sets property bag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "Properties")]
        public System.Collections.Generic.IDictionary<string, JToken> Properties { get; set; }
    }
}
